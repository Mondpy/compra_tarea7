
class Cart:
    from item_manager import show_items
    from ownable import set_owner 
    def __init__(self, owner):
        self.set_owner(owner)
        self.items = []

    def items_list(self):
        return self.items

    def add(self, item):
        self.items.append(item)

    def total_amount(self):
        return sum(item.price for item in self.items)

    def check_out(self):
        total = self.total_amount()
        if self.owner.wallet.balance < total:
            print("ðŸ˜ž Fondos insuficientes en la billetera")
            return

        for item in self.items:
            item.owner.wallet.deposit(item.price)
            self.owner.wallet.withdraw(item.price)
            item.set_owner(self.owner)

        self.items.clear()
        print("ðŸŽ‰ Compra realizada con Ã©xito")


  # Al codificar el mÃ©todo check_out, elimina el pass.
        # Requisitos
        #   - El monto total de la compra de todos los Ã­tems en el carrito (Cart#items) debe ser transferido desde la billetera del dueÃ±o del carrito a la billetera del dueÃ±o de cada Ã­tem.
        #   - La propiedad de todos los Ã­tems en el carrito (Cart#items) debe ser transferida al dueÃ±o del carrito.
        #   - El carrito debe quedar vacÃ­o.
        # Consejo
        #   - La billetera del dueÃ±o del carrito ==> self.owner.wallet
        #   - La billetera del dueÃ±o del Ã­tem ==> item.owner.wallet
        #   - Transferir dinero significa ==> retirar la cantidad de la billetera de (Â¿quiÃ©n?) e ingresarla en la billetera de (Â¿quiÃ©n?)
        #   - La propiedad del Ã­tem se transfiere al dueÃ±o del carrito ==> Cambiar el propietario (item.owner = ?)

